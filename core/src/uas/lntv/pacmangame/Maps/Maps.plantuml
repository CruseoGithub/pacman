@startuml

title __MAPS's Class Diagram__\n

  namespace uas.lntv.pacmangame {
    namespace Maps {
      class uas.lntv.pacmangame.Maps.GameMap {
          {static} + TOTAL_DOTS : int
          - ITEM_POSITIONS : ArrayList<Vector2>
          {static} - collectedDots : int
          + GameMap()
          + collect()
          + countItems()
          + generateSpecialItem()
          {static} + getCollectedDots()
          # generateCollectables()
          {static} - getPercentage()
          {static} - goldenRatio()
          - newItem()
      }
    }
  }
  

  namespace uas.lntv.pacmangame {
    namespace Maps {
      abstract class uas.lntv.pacmangame.Maps.Map {
          # RENDERER : OrthogonalTiledMapRenderer
          # TMX_MAP : TiledMap
          # layerCollect : TiledMapTileLayer
          # layerControlButton : TiledMapTileLayer
          # layerControlZone : TiledMapTileLayer
          # layerPath : TiledMapTileLayer
          # layerWall : TiledMapTileLayer
          {static} # mapHeight : int
          {static} # mapWidth : int
          # matrix : Tile[][]
          {static} # tileSize : int
          - firstMap : boolean
          + Map()
          + collect()
          + countItems()
          + createItem()
          + generateSpecialItem()
          + getLayerControlButton()
          + getLayerControlZone()
          {static} + getMapHeight()
          {static} + getMapWidth()
          + getMatrix()
          + getRenderer()
          + getTile()
          + getTile()
          {static} + getTileSize()
          {abstract} # generateCollectables()
          - generateScreenMap()
      }
    }
  }
  

  namespace uas.lntv.pacmangame {
    namespace Maps {
      class uas.lntv.pacmangame.Maps.MenuMap {
          - HIGHLIGHT_LAYERS : ArrayList<TiledMapTileLayer>
          + MenuMap()
          + collect()
          + getHighlightLayers()
          # generateCollectables()
      }
    }
  }
  

  namespace uas.lntv.pacmangame {
    namespace Maps {
      class uas.lntv.pacmangame.Maps.Tile {
          - cost : int
          - heuristics : double
          - occupiedByGhost : boolean
          - occupiedByPacMan : boolean
          - total : double
          - x : int
          - y : int
          + Tile()
          + Tile()
          + Tile()
          + Tile()
          + enter()
          + getCost()
          + getHeuristics()
          + getItem()
          + getPrev()
          + getTotal()
          + getType()
          + getX()
          + getY()
          + isItem()
          + isOccupiedByGhost()
          + isOccupiedByPacMan()
          + leave()
          + placeItem()
          + setCost()
          + setHeuristics()
          + setPrev()
          + setTotal()
          + takeItem()
      }
    }
  }
  

  namespace uas.lntv.pacmangame {
    namespace Maps {
      enum Item {
        DOT
        EMPTY
        HUNTER
        LIFE
        SLO_MO
        TIME
      }
    }
  }
  

  namespace uas.lntv.pacmangame {
    namespace Maps {
      enum Type {
        DOT
        EMPTY
        PATH
        WALL
      }
    }
  }
  

  uas.lntv.pacmangame.Maps.GameMap -up-|> uas.lntv.pacmangame.Maps.Map
  uas.lntv.pacmangame.Maps.GameMap o-- uas.lntv.pacmangame.Screens.MapScreen : SCREEN
  uas.lntv.pacmangame.Maps.Map o-- uas.lntv.pacmangame.Managers.Assets : ASSETS
  uas.lntv.pacmangame.Maps.MenuMap -up-|> uas.lntv.pacmangame.Maps.Map
  uas.lntv.pacmangame.Maps.Tile -up-|> com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile
  uas.lntv.pacmangame.Maps.Tile o-- uas.lntv.pacmangame.Maps.Tile.Type : TYPE
  uas.lntv.pacmangame.Maps.Tile o-- uas.lntv.pacmangame.Maps.Tile.Item : item
  uas.lntv.pacmangame.Maps.Tile o-- uas.lntv.pacmangame.Maps.Tile : prev
  uas.lntv.pacmangame.Maps.Tile +-down- uas.lntv.pacmangame.Maps.Tile.Item
  uas.lntv.pacmangame.Maps.Tile +-down- uas.lntv.pacmangame.Maps.Tile.Type


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
